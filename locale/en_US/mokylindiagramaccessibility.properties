###############################################################################
# Licensed Materials - Property of IBM
# 5724-Z78
# Â© Copyright IBM Corporation 2007, 2010. All Rights Reserved.
#
# Note to U.S. Government Users Restricted Rights:
# Use, duplication or disclosure restricted by GSA ADP Schedule
# Contract with IBM Corp.
###############################################################################

# These are the properties required for IBM ILOG Diagram for Flex Accessibility 
# implementation (screen reading).
# All theses properties will be part of messages that will be spoken out by the 
# screen reader when navigating or interacting with the Diagram or DiagramPalette 
# components

# NLS_ENCODING=UTF-8
# NLS_MESSAGEFORMAT_NONE

#ISMESSAGEFILE FALSE
#COMPONENTPREFIX CWZDF
#COMPONENTNAMEFOR CWZDF IBM ILOG Elixir Enterprise

###########################################
#com.ibm.mokylin.elixir.diagram.DiagramAccImpl
###########################################

# this is the type of the the Diagram component that follows its name
# scenario : spoken out when the Diagram component receives the focus
accessibility.diagram.diagramComponent=Diagram component

# this is the type of the the DiagramPalette component that is directly followed by its name ({0})
# scenario : spoken out when the DiagramPalette component receives the focus
accessibility.palette.name=Diagram palette component {0}

# this is the default string for a node that does not have a name property (as returned by getName function)
# scenario : spoken out when the a Node is highlighted
accessibility.unnamedNode=unnamed

# this is the default string for a link that does not have a name property (as returned by getName function)
# scenario : spoken out when the a Link is highlighted
accessibility.unnamedLink=unnamed

# this is the default string for a subgraph that does not have a name property (as returned by getName function)
# scenario : spoken out when the a Subgraph is highlighted
accessibility.unnamedSubgraph=unnamed

# this is the type description for a node component
# scenario : spoken out when the a node is highlighted
accessibility.nodeComponent=node

# this is the type description for a link component
# scenario : spoken out when the a Link is highlighted
accessibility.linkComponent=link

# this is the type description for a Subgraph component
# scenario : spoken out when the a Subgraph is highlighted
accessibility.subgraphComponent=subgraph

# this is the depth for a node (simple node or subgraph) ({0} is replaced by the actual node depth)
# scenario : spoken out when the a node is highlighted, after its type
accessibility.depth=depth {0}

# this is the string telling that a node or link is selected
# scenario : spoken out when the a node or link is highlighted
accessibility.selected=selected

# this is the string telling that a subgraph is opened (i.e. expanded)
# scenario : spoken out when the a subgraph is highlighted
accessibility.state.opened=opened

# this is the string telling that a subgraph is closed (i.e. collapsed)
# scenario : spoken out when the a subgraph is highlighted
accessibility.state.closed=closed

# this is the string introducing the currently selected item in a Diagram component ({0} is replaced by the actual item name) 
# scenario : spoken out when the a Diagram receives the focus and there only one item selected
accessibility.selection.selectedItem=Selected item {0}

# this is the string indicating that multiple items are selected in the Diagram. They are not listed
# scenario : spoken out when the a Diagram receives the focus and there more than one item selected
accessibility.selection.multipleItemsSelected=Multiple items selected

# this is the string indicating that no items are selected in the Diagram.
# scenario : spoken out when the a Diagram receives the focus and there is no item selected
accessibility.selection.noItemSelected=No item selected

# this is a context help string to indicate what keys must be pressed to highlight the next or previous node.
# {0} and {1} parameters are replaced by key descriptions declared below
# scenario : spoken out when the a Diagram receives the focus and its keyboard navigation policy is "NODES_BY_HIERARCHY" 
accessibility.help.navigateByHierarchy=,press {0} to navigate to next node, or press {1} to navigate to previous node.

# this is a context help string to indicate what keys must be pressed to highlight the next or previous connection of a node.
# {0} and {1} parameters are replaced by key descriptions declared below
# scenario : spoken out when the a Diagram receives the focus and its keyboard navigation policy is "NODES_BY_HIERARCHY" 
accessibility.help.navigateByConnection=,press {0} to select next connection of current node, or press {1} to select previous connection of current node.

# this is the description of the key used to highlight the previous node.
# scenario : spoken out when the a Diagram receives the focus and its keyboard navigation policy is "NODES_BY_HIERARCHY" 
accessibility.keys.previousNodeActionKey=up arrow

# this is the description of the key used to highlight the next node.
# scenario : spoken out when the a Diagram receives the focus and its keyboard navigation policy is "NODES_BY_HIERARCHY" 
accessibility.keys.nextNodeActionKey=down arrow

# this is the description of the key used to highlight the previous connection of a node.
# scenario : spoken out when the a Diagram receives the focus and its keyboard navigation policy is "NODES_BY_HIERARCHY" 
accessibility.keys.previousConnectionActionKey=up arrow

# this is the description of the key used to highlight the next connection of a node.
# scenario : spoken out when the a Diagram receives the focus and its keyboard navigation policy is "NODES_BY_HIERARCHY" 
accessibility.keys.nextConnectionActionKey=down arrow

# this is the description of the key used to open a subgraph action.
# scenario : spoken out when the a subgraph receives is highlighted and is in a closed state.
accessibility.keys.openNodeActionKey=shift + right arrow

# this is the description of the key used to close a subgraph action.
# scenario : spoken out when the a subgraph receives is highlighted and is in an opened state.
accessibility.keys.closeNodeActionKey=shift + left arrow

# this is a context help string to indicate what keys must be pressed to open a closed node 
accessibility.help.openNodeAction = to open node, press {0}.

# this is a context help string to indicate what keys must be pressed to close a opened node 
accessibility.help.closeNodeAction = to close node, press {0}.

# string used to indicate the connection count when there is no more than one connection on a node
# {0} is the connection count
# scenario : spoken out when a node is highlighted
accessibility.connections.singleOrNoConnection={0} connection

# string used to indicate the connection count when there is there is more than one connection on a node
# {0} is the connection count
# scenario : spoken out when a node is highlighted
accessibility.connections.multipleConnections={0} connections

# string describing the node from where the current link originates from. Is followed by actual node's name in parameter {0}
# scenario : spoken out when a link is highlighted
accessibility.connections.fromNode=from node {0}

# string describing the node from towards which the current link goes to. Is followed by actual node's name in parameter {0}
# scenario : spoken out when a link is highlighted
accessibility.connections.toNode=to node {0}

# string used as AccValue (MSAA definition) for the DiagramPalette component.
# It is a simple concatenation of a string {0} describing the selection status (either
# accessibility.selection.noItemSelected, accessibility.selection.selectedItem or 
# accessibility.selection.multipleItemsSelected strings above) and a string {1} being a help on what
# keys are available to navigate the graph according to the navigation mode (see help.navigateByHierarchy
# and help.navigateByConnection above)
# scenario : spoken out when the DiagramPalette has the focus
accessibility.diagramPaletteAccValue={0}{1}

# string used as AccValue (MSAA definition) for the Diagram component, made up of 3 string :
# - {0} being the description of the diagram component (see accessibility.diagram.diagramComponent)
# - {1} being the selection status (either accessibility.selection.noItemSelected, accessibility.selection.selectedItem or 
#   accessibility.selection.multipleItemsSelected strings above)
# - {2} being a help on what keys are available to navigate the graph according to the navigation mode
# (see help.navigateByHierarchy and help.navigateByConnection above)
# scenario : spoken out when the Diagram has the focus
accessibility.diagramAccValue={0},{1}{2}

# string used as AccValue (MSAA definition) for a link component, made up of 4 string :
# - {0} being the description of the link component (see accessibility.linkComponent)
# - {1} being the selection status (accessibility.selected or empty string if not) 
# - {2} being the connections.fromNode node from where the link starts
# - {3} being the connections.toNode node to which the link goes
# scenario : spoken out when a link component is highlighted
accessibility.linkAccValue={0},{1},{2} {3}

# string used as AccValue (MSAA definition) for a node component (Node or Subgraph), made up of 3 string :
# - {0} being the selection status of the node (accessibility.selected or empty string if not) 
# - {1} being the depth (accessibility.depth) of the node within the graph
# - {2} being the number of connections (either accessibility.connections.singleOrNoConnection or
# accessibility.connections.multipleConnections) on this node
# scenario : spoken out when a node component is highlighted
accessibility.commonNodeValue={0},{1},{2}

# string used as AccValue (MSAA definition) for a Node component, made up of 2 string :
# - {0} being the description of the Node component (see accessibility.nodeComponent)
# - {1} being the common value (accessibility.commonNodeValue)
# scenario : spoken out when a Node component is highlighted
accessibility.nodeAccValue={0},{1}

# string used as AccValue (MSAA definition) for a Subgraph component, made up of 2 string :
# - {0} being the description of the Subgraph component (see accessibility.subgraphComponent)
# - {1} being the common value (accessibility.commonNodeValue)
# - {2} being the help text to open and close subgraphs (help.openNodeAction and help.closeNodeAction)
# scenario : spoken out when a Subgraph component is highlighted
accessibility.subgraphAccValue={0} {1},{2}
