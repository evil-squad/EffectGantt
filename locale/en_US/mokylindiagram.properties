###############################################################################
# Licensed Materials - Property of IBM
# 5724-Z78
# Â© Copyright IBM Corporation 2007, 2010. All Rights Reserved.
#
# Note to U.S. Government Users Restricted Rights:
# Use, duplication or disclosure restricted by GSA ADP Schedule
# Contract with IBM Corp.
###############################################################################
# These are the properties required for IBM ILOG Elixir Enterprise - Diagram module

# NLS_ENCODING=UTF-8
# NLS_MESSAGEFORMAT_NONE

#ISMESSAGEFILE FALSE
#COMPONENTPREFIX CWZDF
#COMPONENTNAMEFOR CWZDF IBM ILOG Elixir Enterprise

# The label of new lanes added when you click on the + icon of a pool adorner.
# (the {0} will be replaced by a number, e.g., 'New Lane 1', 'New Lane 2", etc.)
#
diagram.editor.NewLaneLabel = New Lane {0}

# The title and text of the alert box popped to confirm deletion of objects
# when in the DiagramEditor context. This information is displayed in an Alert
# box. It requests the user to confirm or cancel the operation.
diagram.editor.confirmDelete.title = Delete Objects
diagram.editor.confirmDelete.text = Are you sure that you want to delete the selected objects?

# The default label of nodes
diagram.node.defaultlabel = Node

# The default label of subgraphs
diagram.subgraph.defaultlabel = Subgraph


########################
# START NON-TRANSLATABLE
#
# The following properties are referencing icons by embeding them into the resource bundle
# "Default" values for these images are in en_US/images/. If needed a locale can override
# picture path.

# Icons for the subgraph's expand button
diagram.subgraphSkin.expandedIcon=Embed("../en_US/images/expanded.gif")

# Icons for the subgraph's expand collapse
diagram.subgraphSkin.collapsedIcon=Embed("../en_US/images/collapsed.gif")

# Icons for the subgraph's collapse button in RTL orientation
diagram.subgraphSkin.collapsedLeftIcon=Embed("../en_US/images/collapsed_left.gif")

#
# END NON-TRANSLATABLE
########################



################
# Diagram
# Package: com.mokylin.mokylin.elixir.diagram
# 0001 - 0999
####

# Scenario: This message occurs when a node that is inserted in
# the diagram node data provider already exists. When this message
# occurs, it means that the node has being recognized as already
# in the graph and the process to include it again is ignored.  
# Required action: Avoid adding the same object several times in
# the diagram data provider. 
diagram.expert.message.nodeAlreadyInGraph.CWZDF0001W = Node {0} is already in a graph.

# Scenario: A node is added to the diagram within a hierarchy. The parent
# of the node already exists, but is not a subgraph. In this case, the
# diagram adapter will try to convert the node renderer into a subgraph. This
# message occurs when the convertion of the node renderer fails to convert it
# to a subgraph. 
# Required actions: Validate that the appropriate node renderer or node
# renderer function is in place. The node renderer or node renderer function
# must create instances of Subgraph or a subclass when the node is a container
# of ther nodes.
diagram.expert.message.subgraphExpected.CWZDF0002E = An incorrect node renderer was created. A subgraph renderer is expected.

# Scenario: This error message occurs when assigning a port to a link
# but the port does not have an owner.
# Required action: Verify that the ports that you have created are
# correctly configured and are contained in a renderer.
diagram.expert.message.invalidPortOwner.CWZDF0003E = Cannot set port with null owner: {0}.

# Scenario: This error message occurs when setting a fallback 
# start point of a link to a null value.
# Required action: Verify that the correct value is used as
# link fallback start point.
diagram.expert.message.invalidFallbackStartPoint.CWZDF0004E = Fallback start point should not be null.

# Scenario: This error message occurs when setting a fallback 
# end point of a link to a null value.
# Required action: Verify that the correct value is used as
# fallback end point.
diagram.expert.message.invalidFallbackEndPoint.CWZDF0005E = Fallback end point should not be null.

# Scenario: This error message occurs when an index of an
# array is out of the current range.
# Required action: Verify that the correct value is used as
# argument when accessing an array value.
diagram.expert.message.indexOutOfBounds.CWZDF0006E = Wrong index {0}.

# Scenario: This error message occurs setting ports to a Node
# and any of the ports given as argument is already contained
# in another node.
# Required action: Verify that the correct value is used as
# argument.
diagram.expert.message.portAlreadyOwned.CWZDF0007E = Port {0} is already owned by another node.

# Scenario: This error message occurs creating a default port using
# an unknown position.
# Required action: Verify that the correct value is used as
# argument.
diagram.expert.message.portUnknownPosition.CWZDF0008E = Unknown default port position: {0}.

# Scenario: This error message occurs when trying to move a
# port which is not contained in any node.
# Required action: Verify that the port is correctly assigned
# to a node before moving it to a new position.
diagram.expert.message.cannotMovePortWithoutOwner.CWZDF0009E = Cannot move connection point when owner is null.

# Scenario: This error message occurs when trying to retrieve the
# position of a port which is not contained in any node.
# Required action: Verify that the port is correctly assigned
# to a node before querying the port position.
diagram.expert.message.cannotComputePortPositionWithoutOwner.CWZDF0010E = Cannot compute connection point when owner is null.

# Scenario: This error message occurs when trying to retrieve the
# position of a port for a specific link and the link is null.
# Required action: Verify that the link argument is correctly set.
diagram.expert.message.invalidLink.CWZDF0011E = Link must not be null.

# Scenario: This error message occurs when trying to retrieve the
# position of a port for a specific link and the reference point is null.
# Required action: Verify that the reference point argument is correctly set.
diagram.expert.message.invalidReferencePoint.CWZDF0012E = Reference point must not be null.

# Scenario: This error message occurs when trying to retrieve the
# position of a port for a specific link and the target
# coordinate space is null.
# Required action: Verify that the target coordinate space
# argument is correctly set.
diagram.expert.message.invalidTargetCoordinateSpace.CWZDF0013E = Target coordinate space must not be null.

# Scenario: This error message occurs when trying to retrieve the
# position of a port for a specific link and the connection point is null.
# Required action: Verify that the connection point
# argument is correctly set.
diagram.expert.message.invalidConnectionPoint.CWZDF0014E = Connection point must not be null.

# Scenario: This error message occurs when trying to retrieve the
# position of a port for a specific link and the origin point is null.
# Required action: Verify that the origin point
# argument is correctly set.
diagram.expert.message.invalidOriginPoint.CWZDF0015E = Origin point must not be null.

# Scenario: This error message occurs when using the Subgraph API
# to access a child object and the element is not found in the container.
# Required action: Verify that the correct element is used as argument. 
diagram.expert.message.elementNotFoundInContainer.CWZDF0016E = {0} is not found in this container.

################
# DiagramEditor
# Package: com.mokylin.mokylin.elixir.diagram.editor
# 1000 - 1999
####

# Scenario: This error occurs when using the DiagramEditor API
# when an adorner is not found for a given renderer.
# Required actions: Verify that the adorner has been correctly
# configured for your renderer.
diagram.expert.message.noAdorner.CWZDF1000E = No adorner class found for {0}.

# Scenario: This error occurs when using the DiagramEditor API
# when the method getLowestCommonGraph() is called with a null argument.
# Required actions: This is an internal error. Contact support
# for assistance.
diagram.expert.message.invalidArguments.CWZDF1001E = Incorrect parameters for getLowestCommonGraph().

# Scenario: This error occurs when using the DiagramEditor API, 
# when the method translateSelection() is called with an incorrect
# direction argument.
# Required actions: Verify that a correct direction is passed as
# argument to the method.
diagram.expert.message.invalidDirection.CWZDF1002E = Invalid direction: must be left, right, up or down.

# Scenario: This error occurs when the using the DiagramEditor API,
# and the value of property editedComponent is set to a component 
# that is neither a Diagram, a Graph or a GraphScroller.
# Required actions: Set property editedComponent to the correct 
# type of component.
diagram.expert.message.invalidEditedComponent.CWZDF1003E = Invalid edited component: must be a Diagram, a Graph or a GraphScroller.

################
# Other modules start from 2000
####

# Use the following for general audience messages
#diagram.general.message.meaningfulltext.CCCSSNNNNT = 

